plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group
def local_bclib = findProject(':BCLib') != null
def local_wunderlib = findProject(':WunderLib') != null
def local_wover = findProject(':WorldWeaver') != null

loom {
    accessWidenerPath = file("src/main/resources/betterend.accesswidener")
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"
            vmArg "-Dfabric-api.datagen.modid=${project.modrinth_id}"

            runDir "build/datagen"
        }
    }

    if (local_wover || local_wunderlib) {
        enableTransitiveAccessWideners = true
    }
}

sourceSets {
    main {
        // Add the datagenned files into the jar.
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

subprojects { subproject ->
    subproject.tasks.withType(Javadoc) { javadocTask ->
        javadocTask.failOnError false
        javadocTask.enabled = false
    }

    subproject.tasks.withType(Jar) { jarTask ->
        if (jarTask.name == 'javadocJar') {
            jarTask.enabled = false
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // https://mvnrepository.com/artifact/javax.annotation/jsr305
    compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    // run against the full jar
    modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${project.wthit_version}"

    //1.19.3 modApi "vazkii.patchouli:Patchouli:${project.patchouli_version}"
    println "Using local BCLib: ${local_bclib}"
    if (local_bclib) {
        implementation project(path: ":BCLib", configuration: 'dev')
    } else {
        modImplementation "com.github.quiqueck:BCLib:${project.bclib_version}"
    }
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"

    //needed for trinkets, otherwise BetterEnd would require users to install trinkets
    //modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    //modCompileOnly "dev.emi:trinkets:${project.trinkets_version}"

    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

    modLocalRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"

    println "Using local WunderLib: ${local_wunderlib}"
    if (local_wunderlib) {
        implementation project(path: ":WunderLib", configuration: 'dev')
    }

    println "Using local WorldWeaver: ${local_wover}"
    if (local_wover) {
        implementation project(path: ":WorldWeaver", configuration: 'dev')

        gradle.knownWoverModules.each {
            implementation project(path: ":WorldWeaver:$it", configuration: 'dev')
        }
    } else {
        modImplementation "com.github.quiqueck:WorldWeaver:${project.wover_version}"
    }
}


repositories {
    mavenCentral()
    //mavenLocal()
    maven { url "https://maven.shedaniel.me" }
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.bai.lol" }
    maven { url 'https://maven.terraformersmc.com' }
    flatDir {
        dirs 'override'
    }
}

def useApi(String dep) {
    dependencies.modImplementation(dep) {
        exclude group: 'net.fabricmc.fabric-api'
        exclude group: 'net.fabricmc'
        if (!dep.contains("me.shedaniel")) {
            exclude group: 'me.shedaniel.cloth'
            exclude group: 'me.shedaniel'
        }
    }
}

processResources {
    println "Version: ${project.version}"
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    it.options.release = 21
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE"
    from "LICENSE.ASSETS"
}

//change duplicate strategy for processResources task
tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.WARN
}
tasks.sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.WARN
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

//from https://lowcarbrob.medium.com/android-pro-tip-generating-your-apps-changelog-from-git-inside-build-gradle-19a07533eec4
String generateChangelog() {
    println "Assembeling Changelog ..."
    def lastTag = "git describe --tags --abbrev=0".execute().text.trim()
    def gitLogCmd = "git log $lastTag..HEAD --oneline --no-merges --pretty=format:\"%s\"".execute().text.trim()

    def features = ""
    def fixes = ""
    def changes = ""
    gitLogCmd.eachLine { gitLine ->
        def line = gitLine.substring(1, gitLine.length() - 1)
        if (line.trim().startsWith("[")) {
            def sline = line.split("]", 2)
            if (sline.length == 2) {
                def type = sline[0].trim().toLowerCase().substring(1)
                def comment = sline[1].trim()

                //filter issue links
                if (comment.contains("(")) {
                    def cline = comment.split("\\(", 2)
                    if (cline.length == 2 && cline[1].contains("#")) {
                        comment = cline[0].trim()
                    }
                }

                if (type == "fix" || type == "fixes" || type == "fixed") {
                    fixes += "- $comment \n"
                } else if (type == "feature" || type == "features") {
                    features += "- $comment \n"
                } else if (type == "change" || type == "changes" || type == "changed") {
                    changes += "- $comment \n"
                } else {
                    println "Unknown Type: $type ($line)"
                }
            }
        }

    }
    def changelog = ""
    if (!features.isEmpty()) {
        changelog += "#### Features\n"
        changelog += features.trim()
        changelog += "\n\n"
    }
    if (!changes.isEmpty()) {
        changelog += "#### Changes\n"
        changelog += changes.trim()
        changelog += "\n\n"
    }
    if (!fixes.isEmpty()) {
        changelog += "#### Fixes\n"
        changelog += fixes.trim()
        changelog += "\n\n"
    }

    println "Changelog since $lastTag:\n$changelog"
    return changelog
}

task changelog() {
    doLast {
        new File(projectDir, "CHANGES.md").text = generateChangelog()
    }
}

modrinth {
    def changes = new File(projectDir, "CHANGES.md")
    if (changes.exists()) {
        changes = changes.getText('UTF-8')
    } else {
        changes = ""
    }
    def modrinth_token = new File(projectDir, "../MODRINTH_TOKEN")
    if (modrinth_token.exists()) {
        modrinth_token = modrinth_token.text
    } else {
        modrinth_token = ""
    }
    def slurper = new groovy.json.JsonSlurper()
    token = modrinth_token
    projectId = project.modrinth_id
    versionNumber = project.mod_version
    versionType = project.release_channel
    uploadFile = remapJar
    gameVersions = slurper.parseText(project.modrinth_versions)
    loaders = ["fabric"]
    changelog = changes
    dependencies {
        required.project "fabric-api"
        required.project 'worldweaver'
        required.project "bclib"
        optional.project "emi"
        optional.project "rei"
        optional.project "trinkets"
        optional.project "patchouli"
    }
    debugMode = false
}

curseforge {
    def slurper = new groovy.json.JsonSlurper()
    apiKey = new File(projectDir, "../CURSEFORGE_TOKEN")
    if (apiKey.exists()) {
        apiKey = apiKey.text
    } else {
        apiKey = ""
    }

    def changes = new File(projectDir, "CHANGES.md")
    if (changes.exists()) {
        changes = changes.getText('UTF-8')
    } else {
        changes = ""
    }

    project {
        id = '413596'
        changelogType = 'markdown'
        changelog = changes
        releaseType = project.release_channel
        def versions = slurper.parseText(project.modrinth_versions);
        def latestVersion = ''
        for (v in versions) {
            addGameVersion v
            latestVersion = "[$v]"
        }
        addGameVersion 'Fabric'
        addGameVersion 'Java 21'
        relations {
            requiredDependency 'fabric-api'
            requiredDependency 'worldweaver'
            requiredDependency 'bclib'
            optionalDependency 'emi'
            optionalDependency 'roughly-enough-items'
            optionalDependency 'patchouli'
            optionalDependency 'trinkets'
        }
        mainArtifact(remapJar) {
            displayName = "$project.modrinth_id-$project.version $latestVersion"
        }
        afterEvaluate {
            mainArtifact(remapJar.outputs)
        }
    }

    options {
        debug = false
        forgeGradleIntegration = false
    }
}

task nextVersion() {
    doLast {
        def inputFile = new File('modrinth.json')
        def gameVersions = java.net.URLEncoder.encode(project.modrinth_versions, "UTF-8")
        new URL("https://api.modrinth.com/v2/project/${project.modrinth_id}/version?&game_versions=${gameVersions}").withInputStream { i -> inputFile.withOutputStream { it << i } }

        def json = new groovy.json.JsonSlurper().parseText(inputFile.text)
        def version = json[0].version_number

        //increment patch version
        def indexedVersionList = version.split(/\./).toList().withIndex()
        indexedVersionList = indexedVersionList.collect { num, idx -> num.toInteger() }
        indexedVersionList[2] = indexedVersionList[2].value + 1
        def updatedVersion = indexedVersionList.join(".")

        println "\n\n"
        println "------------- CURRENT VERSION -------------"
        println "Last Published Version: " + version
        println "         Game Versions: " + json[0].game_versions
        println "                Status: " + json[0].status
        println "              Featured: " + json[0].featured
        println "            Downloaded: " + json[0].downloads
        println "\n"
        println "-------------- NEXT VERSION ---------------"
        println "Next Version: " + updatedVersion
        println "\n\n"

        def propertiesFile = new File("gradle.properties")
        def newContents = propertiesFile.text.replaceFirst("mod_version=\\d+.\\d+.\\d+", "mod_version=${updatedVersion}")
        propertiesFile.text = newContents
    }
}

allprojects {
    // Allow 400 errors.
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "5000"
            //<< "-Xlint:rawtypes"
            //<< "-Xlint:unchecked"
            //<< "-Xlint:deprecation"
        }
    }
}
